<!--
    Ant build script for the fb-contrib Eclipse Plugin.
    
    Use the dist target to build a distributable plugin zip file.

    Use the site target to build an update site.
-->

<project name="fbcontribeclipse" default="stable-site">

	<!-- Eclipse plugin id, will never change -->
	<property name="plugin.id" value="fb-contrib-eclipse-quick-fixes" />
	<!-- Plugin id suffix which is the build date -->
	<tstamp>
		<format property="plugin.date" pattern="yyyyMMdd-HHmm" />
	</tstamp>

	<echo>"${plugin.date}"</echo>
	
	

	<!--
    The local.properties file must contain the location of
       - Eclipse platform (key is "eclipsePlugin.dir", value is the 3.3+ Eclipse plugins folder)
       - a git installation (key is "git.full-path", value is the absolute path to the git executable)
    This values are likely to be different for each checkout of the plugin,
    so the local.properties file is not managed by version control.
    
    See local.properties.example for an example setup file
-->
	<property file="local.properties" />

	<property file="build.properties" />
	
	<!-- Sets a default plugin location -->
	<property name="eclipsePlugin.dir" value="./eclipse" />
	
	<!-- Sets a default git location (for Ubuntu) -->
	<property name="git.full-path" value="/usr/bin/git" />
	
	<property name="build.dir" value="."/>

	<property name="src.dir" value="src"/>
	<property name="zip.dir" value="zips"/>
	<property name="dist.dir" value="dist"/>

	<!-- the binaries/classes, built by javac -->
	<property name="bin.dir" value="bin_build" />

	<!-- the binaries/classes, built by eclipse -->
	<property name="binEclipse.dir" value="bin_eclipse" />

	<!-- update site destination directory -->
	<property name="site.dir" value="${bin.dir}/site" />
	
	<!-- fb-contrib core package name in slashed notation -->
	<property name="fbcontribpackage" value="com/mebigfatguy/fbcontrib" />
	
	<property name="find_bugs_dev_version" value="3.0.1.20150212-23b0732" />
	
	<!-- Location of fb-contrib.jar to extract and include in this build -->
	<property name="fb-contrib.jar" value="${fb-contrib.dir}/fb-contrib-${fb-contrib.version}.jar" />

	<path id="plugin.classpath">
		<fileset dir="${eclipsePlugin.dir}">
			<include name="**/*.jar"/>
			<exclude name="**/datanucleus-enhancer*.jar"/>
			<exclude name="fb-contrib-eclipse-quick-fixes/*.jar"/>
		</fileset>
	</path>

	<target name="init">
		<mkdir dir="${fb-contrib.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${bin.dir}"/>
		<mkdir dir="${zip.dir}"/>
	</target>

	<target name="clean" depends="init" description="Clean up temporary files">
		<delete includeemptydirs="true" >
			<fileset dir="${bin.dir}"  includes="**/*"/>
			<fileset dir="${zip.dir}"  includes="**/*"/>
			<!-- defaultexcludes is required to delete .svn and .cvsignore -->
			<fileset dir="${dist.dir}" includes="**/*" defaultexcludes="false"/>
		</delete>
	</target>
	
	<target name="fb-contrib.check">
		    <condition property="fb-contrib.exists">
		      <available file="${fb-contrib.jar}" type="file"/>
		    </condition>
	</target>
	
	<target name="downloadFB-contrib" depends="clean, fb-contrib.check" unless="fb-contrib.exists" description="download fb-contrib if it doesn't exist">
		<echo message="Downloading fb-contrib" />
		<get src="https://github.com/kjlubick/fb-contrib-eclipse-quick-fixes/releases/download/0.4.0/fb-contrib-6.1.0.jar" dest="${fb-contrib.jar}"/>
	</target>
	
	<target name="eclipse-deps.check">
	    <condition property="eclipse-deps.exists">
	      <available file="${eclipsePlugin.dir}" type="dir"/>
	    </condition>
		<echo message="Does the eclipse file exist?" />
		<echoproperties />
	  </target>
	
	<target name="downloadEclipseDeps" depends="clean, eclipse-deps.check" unless="eclipse-deps.exists" description="download Eclipse if it doesn't exist">
		<echo message="Downloading Eclipse" />
		<mkdir dir="${eclipsePlugin.dir}"/>
		<get src="https://github.com/kjlubick/fb-contrib-eclipse-quick-fixes/releases/download/0.4.0/eclipse-dependencies.zip" dest="eclipse.zip"/>	<!--Eclipse-luna with findbugs 3.0.1 01/05/2015-->
		<unzip src="eclipse.zip" dest="${eclipsePlugin.dir}"/>
	</target>

	<target name="extractJar" depends="init, downloadFB-contrib">
		<echo message="Copying fb-contrib classes to Eclipse plugin"/>
		<unzip src="${fb-contrib.jar}" dest="${bin.dir}">
			<patternset>
				<include name="**/*.*" />
				<exclude name="${fbcontribpackage}/collect/*.*" />
				<exclude name="*.xml" />
				<exclude name="bugrank.txt" />
				<exclude name="META-INF/*.*" />
			</patternset>
		</unzip>
	</target>

	<target name="classes" depends="init, extractJar, downloadEclipseDeps, downloadFB-contrib" description="Compile java source files">
		<echo message="Compiling fb-contrib Eclipse quickfixes plugin" />
		<echo>Requires JDK 1.7.x (not 1.8!), using: ${ant.java.version}</echo>
		<fail message="Requires JDK 7.x (not 8!), using: ${ant.java.version}">
			<condition>
				<equals arg1="1.8" arg2="${ant.java.version}"/>
			</condition>
		</fail>
		<fail unless="eclipsePlugin.dir"
            message="Please specify path to the Eclipse 3.6+ plugins folder in local.properties file.  See local.properties.example"/>
		<!-- Compile Java source files. -->
		<javac srcdir="${src.dir}"
                  includeantruntime="false"
          destdir="${bin.dir}"
                source="1.7"
                target="1.7"
                debug="on">
			<classpath refid="plugin.classpath"/>
			<compilerarg value="-Xlint:all,-path,-unchecked"/>
		</javac>
		<!-- Copy the .properties files from the source directory. -->
		<copy todir="${bin.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
		<copy todir="${binEclipse.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>

	<target name="version" description="Extract the plugin id and version">
		<echo message="Verifying and creating fb-contrib Eclipse quickfixes plugin version info"/>

		<!-- 1) read plugin base version from META-INF/MANIFEST.MF to ${eclipse.release.base} -->
		<loadfile srcFile="META-INF/MANIFEST.MF" property="eclipse.release.base">
			<filterchain>
				<tokenfilter>
					<containsregex pattern="Bundle-Version: (.*)\.qualifier" replace="\1"/>
				</tokenfilter>
				<deletecharacters chars=" \n\r"/>
			</filterchain>
		</loadfile>

		<!-- 1) set the values for plugin.version -->
		<property name="plugin.qualifier" value="${plugin.date}" />
		<property name="plugin.version" value="${eclipse.release.base}.${plugin.qualifier}" />

		<echo>plugin version  ${plugin.version}</echo>

		<!-- 3) Copy META-INF/MANIFEST.MF to ${dist.dir}, update "qualifier" to current date/time -->
		<copy file="META-INF/MANIFEST.MF" toFile="${dist.dir}/META-INF/MANIFEST.MF" overwrite="true">
			<filterset begintoken="q" endtoken="r">
				<filter token="ualifie" value="${plugin.qualifier}"/>
			</filterset>
		</copy>
	</target>

	<!-- per default, FB core classes are not recompiled if already available -->
	<target name="dist" depends="clean,classes,version"
        description="Build a plugin distributable">
		<echo message="Creating fb-contrib Eclipse quickfixes plugin binary distribution"/>
		<jar destfile="${dist.dir}/fb-contrib-eclipse-plugin.jar" >
			<fileset dir="${bin.dir}" excludes="de/tobject/findbugs/tools/**" />
		</jar>
		<copy todir="${dist.dir}" >
			<fileset dir="${build.dir}" >
				<!-- content is invalid right now
                <include name="welcome.xml"/>
                -->
				<include name="RELEASENOTES"/>
				<include name="plugin.xml"/>
				<include name=".options"/>
				<include name="plugin*.properties"/>
				<!--match plugin.properties and plugin_ja.properties -->
				<include name="about.*"/>
				<include name="plugin/*.*" />
				<!-- p2 installation instructions, added because of bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=265525#c18
                and disabled because of bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=256361
                <include name="META-INF/p2.inf" />  -->
			</fileset>
		</copy>


		<!-- Create plugin zipfile. -->
		<zip destfile="${zip.dir}/${plugin.id}_${plugin.version}.zip">
			<zipfileset prefix="${plugin.id}_${plugin.version}" dir="${dist.dir}" includes="**"/>
		</zip>
	</target>

	<!-- Build source distribution. -->
	<target name="srcdist" depends="clean,classes,version,dist" unless="doNotExportSrc">
		<echo message="Creating fb-contrib Eclipse quickfixes plugin source distribution"/>

		<property file="${bin.dir}/plugininfo.properties"/>

		<mkdir dir="${dist.dir}/src"/>
		<delete dir="${dist.dir}/src/eclipsePlugin-${plugin.version}"/>

		<exec executable="${git.full-path}" spawn="false" dir="${basedir}"  failonerror="true">
			<arg value="archive"/>
			<arg value="-o"/>
			<arg value="${zip.dir}/${plugin.id}_${plugin.version}-source.zip"/>
			<arg value="HEAD"/>
		</exec>
	</target>

	<target name="stable-site" depends="srcdist" description="Creates Eclipse update site with this version as the primary version">
		<echo message="Creating fb-contrib Eclipse quickfixes plugin update sites"/>

		<filterset id="sitevars">
			<filter token="PLUGIN_ID" value="${plugin.id}"/>
			<filter token="PLUGIN_VERSION" value="${plugin.version}"/>
			<filter token="FEATURE_ID" value="${plugin.id}"/>
			<filter token="FEATURE_VERSION" value="${plugin.version}"/>
			<filter token="FINDBUGS_VERSION" value="${find_bugs_dev_version}"/>
		</filterset>

		<mkdir dir="${site.dir}"/>
		<mkdir dir="${site.dir}/features"/>
		<mkdir dir="${site.dir}/plugins"/>

		<!-- plugin.jar: can't rename the .zip file from the 'dist' target because of the prefix -->
		<zip destfile="${site.dir}/plugins/${plugin.id}_${plugin.version}.jar">
			<fileset dir="${dist.dir}" includes="**"/>
		</zip>

		<!-- feature.jar -->
		<copy file="${build.dir}/plugin_feature.xml" toFile="${site.dir}/feature.xml">
			<filterset refid="sitevars"/>
		</copy>
		<!-- use zip task, not jar task, since we don't want a manifest -->
		<zip destfile="${site.dir}/features/${plugin.id}_${plugin.version}.jar" compress="false">
			<fileset file="${site.dir}/feature.xml"/>
		</zip>
		<move file="${site.dir}/feature.xml" tofile="${site.dir}/.feature.xml"/>


		<!-- site.xml -->
		<echo level="info" message="copying site.xml to ${site.dir}"/>

		<copy file="${build.dir}/plugin_site_stable.xml" toFile="${site.dir}/site.xml">
			<filterset refid="sitevars"/>
		</copy>
		
		<echo level="info" message="Downloading FindBugs dev version ${find_bugs_dev_version}" />
		<get src="https://github.com/kjlubick/fb-contrib-eclipse-quick-fixes/releases/download/0.4.0/plugins-edu.umd.cs.findbugs.plugin.eclipse_${find_bugs_dev_version}.jar"
			dest="${site.dir}/plugins/edu.umd.cs.findbugs.plugin.eclipse_${find_bugs_dev_version}.jar"/>
		<get src="https://github.com/kjlubick/fb-contrib-eclipse-quick-fixes/releases/download/0.4.0/features-edu.umd.cs.findbugs.plugin.eclipse_${find_bugs_dev_version}.jar"
			dest="${site.dir}/features/edu.umd.cs.findbugs.plugin.eclipse_${find_bugs_dev_version}.jar"/>
		
		<echo>Built site for stable plugin version ${plugin.version}</echo>
	</target>
	
	
	
	<target name="dev-site" depends="srcdist" description="Creates Eclipse update site with this version added as a dev version">
		<echo message="Creating fb-contrib Eclipse quickfixes plugin update sites"/>
		
		<filterset id="sitevars">
			<filter token="PLUGIN_ID" value="${plugin.id}"/>
			<filter token="PLUGIN_VERSION" value="${plugin.version}"/>
			<filter token="FEATURE_ID" value="${plugin.id}"/>
			<filter token="FEATURE_VERSION" value="${plugin.version}"/>
			<filter token="FINDBUGS_VERSION" value="${find_bugs_dev_version}"/>
		</filterset>
		
		<mkdir dir="${site.dir}"/>
		<mkdir dir="${site.dir}/dev-features"/>
		<mkdir dir="${site.dir}/plugins"/>

		<!-- for debugging 
		<copy file="${build.dir}/old_site.xml" toFile="${site.dir}/old_site.xml" overwrite="true"></copy>
		-->
		
		<!-- Download old site.xml (with normal version-->
		<get src="http://dl.bintray.com/kjlubick/fb-contrib-eclipse-quickfixes/site.xml"
					dest="${site.dir}/old_site.xml"/> 
		
		<!-- Copy old_site.xml and remove anything starting with the dev prefix --> <!--dev-->
		<!-- or </site --> 
		<copy file="${site.dir}/old_site.xml" 
			toFile="${site.dir}/site.xml" overwrite="true">
			<filterchain>
				<linecontains negate="true">
				  <contains value="&lt;!--dev--&gt;"/>
				</linecontains>
				<linecontains negate="true">
				  <contains value="&lt;/site&gt;"/>
				</linecontains>
			</filterchain>
		</copy>
		
		<!-- load the dev portions (Bleeding edge category and our new feature) and fill with 
		Appropriate version details -->
		<loadfile srcFile="${build.dir}/plugin_site_dev.xml" 
			property="dev.release.xml">
			<filterchain>
				<replacetokens>
			        <token key="FEATURE_ID" value="${plugin.id}"/>
					<token key="FEATURE_VERSION" value="${plugin.version}"/>
			    </replacetokens>
			</filterchain>
		</loadfile>
		
		<!-- combine the two above steps to make a new site.xml -->
		<concat destfile="${site.dir}/site.xml" append="yes">${dev.release.xml}</concat>	
		<delete file="${site.dir}/old_site.xml" />
		
		<!-- use zip task, not jar task, since we don't want a manifest -->
		<zip destfile="${site.dir}/plugins/dev_${plugin.id}_${plugin.version}.jar">
			<fileset dir="${dist.dir}" includes="**"/>
		</zip>
	
		<!-- feature.jar -->
		<copy file="${build.dir}/plugin_feature.xml" toFile="${site.dir}/feature.xml">
			<filterset refid="sitevars"/>
		</copy>
		<!-- use zip task, not jar task, since we don't want a manifest -->
		<zip destfile="${site.dir}/dev-features/${plugin.id}_${plugin.version}.jar" compress="false">
			<fileset file="${site.dir}/feature.xml"/>
		</zip>
		
		<delete file="${site.dir}/feature.xml"/>
		<!-- add dev feature to dev-features and put jar in plugins/ with a dev_ prefix-->
		<!-- Deploy script will clear out dev-features folder, delete all dev_ prefix files in plugins
		 and then upload new plugin/feature/site.xml-->
	</target>
	
	<target name="p2-eclipse" if="eclipse.running">
		<echo>Using Eclipse's featuresAndBundles p2 output</echo>
		<p2.publish.featuresAndBundles repository="file://${basedir}/output-site" repositoryName="findbugs-eclipse-quickfixes" compress="true">
			<features dir="${site.dir}/features"/>
			<bundles dir="${site.dir}/plugins"/>
		</p2.publish.featuresAndBundles>
	</target>
	
	<target name="p2-headless-eclipse" unless="eclipse.running">
		<java jar="../eclipse-relang/plugins/org.eclipse.equinox.launcher.jar" fork="true" failonerror="true">
			<arg line="-application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher" />
			<arg line="-metadataRepository file:\\${basedir}/output-site" />
			<arg line="-artifactRepository file:\\${basedir}/output-site" />
			<arg line="-source ${basedir}/${site.dir}" />
			<arg line="-compress" />
			<arg line="-publishArtifacts" />
		</java>

	</target>
	
	<target name="make-stable-p2" depends="stable-site, p2-eclipse, p2-headless-eclipse">
		
	</target>

</project>
